from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.response import Response
from rest_framework import status
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from pragas.services.huggingface_service import huggingface_service
import logging

logger = logging.getLogger(__name__)

@api_view(['POST'])
@permission_classes([AllowAny])  # Mudando para AllowAny para funcionar sem autentica√ß√£o
def chatbot_view(request):
    """
    View para chatbot de recomenda√ß√µes agr√≠colas inteligente
    """
    try:
        pergunta = request.data.get('pergunta', '')
        contexto_adicional = request.data.get('contexto', {})
        
        if not pergunta:
            return Response(
                {'erro': 'Pergunta √© obrigat√≥ria'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Determinar contexto do utilizador
        if hasattr(request, 'user') and request.user.is_authenticated:
            user = request.user
            localizacao = getattr(user, 'localizacao', 'Mo√ßambique')
            culturas_interesse = getattr(user, 'culturas_interesse', [])
        else:
            # Usar contexto fornecido ou padr√£o
            localizacao = contexto_adicional.get('localizacao', 'Mo√ßambique')
            culturas_interesse = contexto_adicional.get('culturas_interesse', ['milho'])
        
        # Gerar contexto enriquecido
        context_data = {
            'pergunta': pergunta,
            'localizacao': localizacao,
            'culturas_interesse': culturas_interesse,
            'historico_conversa': contexto_adicional.get('historico_conversa', [])
        }
        
        # Tentar HuggingFace primeiro
        try:
            resposta_ai = gerar_resposta_huggingface(context_data)
            if resposta_ai:
                return Response({
                    'resposta': resposta_ai,
                    'contexto': 'IA Avan√ßada (HuggingFace)',
                    'confidence': 0.9,
                    'timestamp': '2025-08-21T15:30:00'
                })
        except Exception as e:
            logger.error(f"Erro HuggingFace: {e}")
        
        # Fallback para sistema inteligente local
        resposta_local = gerar_resposta_contextual_avancada(context_data)
        
        return Response({
            'resposta': resposta_local['resposta'],
            'contexto': resposta_local['fonte'],
            'confidence': resposta_local['confidence'],
            'recomendacoes_relacionadas': resposta_local.get('relacionadas', []),
            'timestamp': '2025-08-21T15:30:00'
        })
        
    except Exception as e:
        logger.error(f"Erro no chatbot: {e}")
        return Response(
            {'erro': 'Erro interno do servidor'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

def gerar_resposta_huggingface(context_data: dict) -> str:
    """
    Gerar resposta usando HuggingFace com contexto enriquecido
    """
    try:
        pergunta = context_data['pergunta']
        localizacao = context_data['localizacao']
        culturas = context_data['culturas_interesse']
        
        # Criar prompt contextualizado
        prompt = f"""Voc√™ √© um especialista agr√≠cola de Mo√ßambique. 
        
Pergunta do agricultor de {localizacao}: {pergunta}
Culturas de interesse: {', '.join(culturas) if culturas else 'milho'}

Forne√ßa uma resposta espec√≠fica para as condi√ß√µes de Mo√ßambique, considerando:
- Clima tropical/subtropical
- √âpocas das chuvas (Outubro-Mar√ßo)
- Variedades locais adaptadas
- Pr√°ticas de agricultura familiar
- Recursos limitados

Seja pr√°tico e espec√≠fico."""

        # Tentar usar HuggingFace
        resposta = huggingface_service.generate_recommendation(prompt)
        return resposta
        
    except Exception as e:
        logger.error(f"Erro HuggingFace: {e}")
        return None

def gerar_resposta_contextual_avancada(context_data: dict) -> dict:
    """
    Sistema inteligente de respostas baseado em an√°lise contextual
    """
    pergunta = context_data.get('pergunta', '').lower()
    localizacao = context_data.get('localizacao', context_data.get('regiao', 'Maputo'))
    culturas = context_data.get('culturas_interesse', context_data.get('cultura', 'milho'))
    
    # Garantir que culturas √© uma lista
    if isinstance(culturas, str):
        culturas = [culturas]
    elif not culturas:
        culturas = ['milho']
    
    # An√°lise de inten√ß√£o
    intencao = analisar_intencao(pergunta)
    cultura_detectada = detectar_cultura(pergunta, culturas)
    
    # Base de conhecimento contextual
    if intencao == 'plantio':
        return gerar_resposta_plantio(cultura_detectada, localizacao)
    elif intencao == 'pragas':
        return gerar_resposta_pragas(cultura_detectada, localizacao)
    elif intencao == 'irrigacao':
        return gerar_resposta_irrigacao(cultura_detectada, localizacao)
    elif intencao == 'fertilizacao':
        return gerar_resposta_fertilizacao(cultura_detectada, localizacao)
    elif intencao == 'mercado':
        return gerar_resposta_mercado(cultura_detectada, localizacao)
    elif intencao == 'clima':
        return gerar_resposta_clima(localizacao)
    else:
        return gerar_resposta_geral(pergunta, localizacao)

def analisar_intencao(pergunta: str) -> str:
    """Analisar a inten√ß√£o da pergunta usando palavras-chave"""
    intencoes = {
        'plantio': ['plantar', 'plantio', 'semear', '√©poca', 'quando', 'variedade'],
        'pragas': ['praga', 'inseto', 'lagarta', 'fungo', 'doen√ßa', 'controle', 'tratamento'],
        'irrigacao': ['√°gua', 'regar', 'rega', 'irrigar', 'quantidade', 'irriga√ß√£o'],
        'fertilizacao': ['adubo', 'fertilizante', 'nutriente', 'npk', 'fertilizar'],
        'mercado': ['pre√ßo', 'vender', 'mercado', 'custo', 'lucro', 'rentabilidade'],
        'clima': ['tempo', 'chuva', 'seca', 'temperatura', 'clima', 'esta√ß√£o']
    }
    
    for intencao, palavras in intencoes.items():
        if any(palavra in pergunta for palavra in palavras):
            return intencao
    
    return 'geral'

def detectar_cultura(pergunta: str, culturas_interesse: list) -> str:
    """Detectar qual cultura est√° sendo mencionada"""
    culturas_conhecidas = ['milho', 'feijao', 'feij√£o', 'mandioca', 'arroz', 'tomate', 'amendoim']
    
    for cultura in culturas_conhecidas:
        if cultura in pergunta:
            return cultura
    
    # Se n√£o detectou, usar a primeira das culturas de interesse
    if culturas_interesse:
        return culturas_interesse[0]
    
    return 'milho'  # Default

def gerar_resposta_plantio(cultura: str, localizacao: str) -> dict:
    """Gerar resposta espec√≠fica sobre plantio"""
    base_conhecimento = {
        'milho': {
            'epoca': 'Outubro-Dezembro',
            'variedades': ['ZM521', 'ZM623', 'Matuba', 'PAN53'],
            'espacamento': '75cm x 25cm',
            'profundidade': '3-5cm',
            'ciclo': '120-140 dias'
        },
        'feijao': {
            'epoca': 'Novembro-Janeiro',
            'variedades': ['Nhemba', 'Feij√£o boer', 'Vulgar'],
            'espacamento': '40cm x 15cm',
            'profundidade': '2-3cm',
            'ciclo': '75-90 dias'
        },
        'mandioca': {
            'epoca': 'Outubro-Mar√ßo',
            'variedades': ['Chaimite', 'Nicadzi', 'TMS'],
            'espacamento': '1m x 1m',
            'profundidade': '15cm',
            'ciclo': '8-12 meses'
        }
    }
    
    info = base_conhecimento.get(cultura, base_conhecimento['milho'])
    
    resposta = f"""üå± **Plantio de {cultura.title()} em {localizacao}:**

**√âpoca ideal:** {info['epoca']} (√©poca das chuvas)
**Variedades recomendadas:** {', '.join(info['variedades'])}
**Espa√ßamento:** {info['espacamento']}
**Profundidade:** {info['profundidade']}
**Ciclo de produ√ß√£o:** {info['ciclo']}

**Prepara√ß√£o do solo:**
‚Ä¢ Lavrar ou cavar 15-20cm de profundidade
‚Ä¢ Adicionar mat√©ria org√¢nica (estrume, compost)
‚Ä¢ Fazer sulcos ou covas seguindo o espa√ßamento

**Dicas para {localizacao}:**
‚Ä¢ Aproveite as primeiras chuvas consistentes
‚Ä¢ Use variedades adaptadas ao clima local
‚Ä¢ Prepare o terreno antes das chuvas come√ßarem

üí° **Pr√≥ximos passos:** Quer saber sobre rega, pragas ou fertiliza√ß√£o para {cultura}?"""

    return {
        'resposta': resposta,
        'fonte': 'Base de Conhecimento Agr√≠cola - Mo√ßambique',
        'confidence': 0.85,
        'relacionadas': [
            f'Como irrigar {cultura}?',
            f'Que pragas atacam {cultura}?',
            f'Fertilizantes para {cultura}'
        ]
    }

def gerar_resposta_pragas(cultura: str, localizacao: str) -> dict:
    """Gerar resposta espec√≠fica sobre pragas"""
    pragas_comuns = {
        'milho': {
            'principais': ['Lagarta do cartucho', 'Broca do colmo', 'Pulg√µes'],
            'tratamentos': ['Bt (Bacillus thuringiensis)', '√ìleo de neem', 'Rota√ß√£o de culturas'],
            'prevencao': ['Monitoramento regular', 'Plantas armadilha', 'Diversifica√ß√£o']
        },
        'feijao': {
            'principais': ['Mosca branca', 'Vaquinha', 'Trips'],
            'tratamentos': ['Sab√£o neutro', 'Extrato de alho', 'Predadores naturais'],
            'prevencao': ['Mulching', 'Cons√≥rcio com plantas repelentes', 'Rota√ß√£o']
        }
    }
    
    info = pragas_comuns.get(cultura, pragas_comuns['milho'])
    
    resposta = f"""üêõ **Controle de Pragas em {cultura.title()} - {localizacao}:**

**Pragas mais comuns:**
{chr(10).join([f'‚Ä¢ {praga}' for praga in info['principais']])}

**Tratamentos naturais:**
{chr(10).join([f'‚Ä¢ {tratamento}' for tratamento in info['tratamentos']])}

**Preven√ß√£o:**
{chr(10).join([f'‚Ä¢ {prev}' for prev in info['prevencao']])}

**üéØ Estrat√©gia integrada:**
1. **Monitoramento:** Inspecione as plantas 2-3x por semana
2. **Controle biol√≥gico:** Preserve inimigos naturais
3. **Rota√ß√£o:** Alterne com culturas diferentes
4. **Higiene:** Remova restos culturais infectados

üì∏ **Use nossa ferramenta:** Fotografe pragas suspeitas para identifica√ß√£o autom√°tica!"""

    return {
        'resposta': resposta,
        'fonte': 'Sistema de Maneio Integrado de Pragas',
        'confidence': 0.88,
        'relacionadas': [
            'Detectar pragas por foto',
            'Receitas de defensivos naturais',
            'Calend√°rio de monitoramento'
        ]
    }

def gerar_resposta_irrigacao(cultura: str, localizacao: str) -> dict:
    """Gerar resposta sobre rega"""
    necessidades = {
        'milho': '500-800mm por ciclo',
        'feijao': '300-500mm por ciclo',
        'mandioca': '1000-1500mm por ano',
        'tomate': '400-600mm por ciclo'
    }
    
    necessidade = necessidades.get(cultura, '500-700mm por ciclo')
    
    resposta = f"""üíß **Rega de {cultura.title()} em {localizacao}:**

**Necessidade h√≠drica:** {necessidade}
**Frequ√™ncia:** A cada 2-3 dias (√©poca seca)
**Melhor hor√°rio:** 6h-8h ou 17h-19h
**M√©todo recomendado:** Gotejamento ou sulcos

**Sinais de falta de √°gua:**
‚Ä¢ Folhas murchas nas horas quentes
‚Ä¢ Crescimento lento
‚Ä¢ Folhas amareladas

**Sinais de excesso:**
‚Ä¢ Folhas amarelas persistentes
‚Ä¢ Fungos no solo
‚Ä¢ Crescimento excessivo de folhas

**üí° Dicas para economizar √°gua:**
‚Ä¢ Use cobertura morta (palha, folhas)
‚Ä¢ Fa√ßa rega localizada
‚Ä¢ Aproveite √°gua da chuva
‚Ä¢ Irrigue no in√≠cio da manh√£

**Para {localizacao}:** Considere as chuvas sazonais no planeamento da rega."""

    return {
        'resposta': resposta,
        'fonte': 'Manual de Rega Eficiente',
        'confidence': 0.82,
        'relacionadas': [
            'Sistemas de irriga√ß√£o caseiros',
            'Capta√ß√£o de √°gua da chuva',
            'Sinais de estresse h√≠drico'
        ]
    }

def gerar_resposta_fertilizacao(cultura: str, localizacao: str) -> dict:
    """Gerar resposta sobre fertiliza√ß√£o"""
    resposta = f"""üåø **Fertiliza√ß√£o de {cultura.title()} em {localizacao}:**

**Aduba√ß√£o org√¢nica (preferencial):**
‚Ä¢ Esterco bovino: 2-3 toneladas/hectare
‚Ä¢ Compost caseiro: 1-2 toneladas/hectare
‚Ä¢ Aplicar 2 semanas antes do plantio

**Aduba√ß√£o qu√≠mica (se necess√°rio):**
‚Ä¢ NPK 12-24-12: 200-300 kg/hectare no plantio
‚Ä¢ Ureia: 100-150 kg/hectare (cobertura ap√≥s 30 dias)

**Fertilizantes naturais:**
‚Ä¢ Cinza de madeira (pot√°ssio)
‚Ä¢ Farinha de osso (f√≥sforo)
‚Ä¢ Esterco de galinha (nitrog√™nio)

**üìÖ Cronograma:**
1. **Pr√©-plantio:** Mat√©ria org√¢nica + f√≥sforo
2. **Plantio:** NPK equilibrado
3. **30 dias:** Nitrog√™nio (cobertura)
4. **60 dias:** Nitrog√™nio (se necess√°rio)

**‚ö†Ô∏è Cuidados:**
‚Ä¢ N√£o exagere no nitrog√™nio (favorece pragas)
‚Ä¢ Fa√ßa an√°lise de solo quando poss√≠vel
‚Ä¢ Regue ap√≥s aplica√ß√£o de fertilizantes"""

    return {
        'resposta': resposta,
        'fonte': 'Guia de Nutri√ß√£o Vegetal',
        'confidence': 0.80,
        'relacionadas': [
            'Como fazer compost caseiro',
            'Sinais de defici√™ncia nutricional',
            'An√°lise de solo'
        ]
    }

def gerar_resposta_mercado(cultura: str, localizacao: str) -> dict:
    """Gerar resposta sobre mercado"""
    resposta = f"""üìà **Mercado de {cultura.title()} em {localizacao}:**

**üí∞ Estrat√©gias de comercializa√ß√£o:**
‚Ä¢ Venda direta ao consumidor (melhor margem)
‚Ä¢ Cooperativas de agricultores
‚Ä¢ Mercados locais e feiras
‚Ä¢ Contratos com empresas/escolas

**üìä Fatores que influenciam pre√ßos:**
‚Ä¢ √âpoca do ano (safra/entressafra)
‚Ä¢ Qualidade do produto
‚Ä¢ Oferta e demanda regional
‚Ä¢ Condi√ß√µes de armazenamento

**üéØ Para maximizar lucros:**
‚Ä¢ Escalone plantios para venda cont√≠nua
‚Ä¢ Invista em qualidade e apresenta√ß√£o
‚Ä¢ Forme grupos para negocia√ß√£o
‚Ä¢ Diversifique canais de venda

**üì± Use nossa calculadora:** Calcule custos e rentabilidade da sua produ√ß√£o!

**‚è∞ Melhor √©poca para vender {cultura}:**
‚Ä¢ Entressafra: pre√ßos mais altos
‚Ä¢ Evite vender logo ap√≥s colheita (pre√ßos baixos)
‚Ä¢ Monitore pre√ßos regionais regularmente"""

    return {
        'resposta': resposta,
        'fonte': 'Central de Intelig√™ncia de Mercado Agr√≠cola',
        'confidence': 0.75,
        'relacionadas': [
            'Pre√ßos atuais na sua regi√£o',
            'Calculadora de rentabilidade',
            'Cooperativas pr√≥ximas'
        ]
    }

def gerar_resposta_clima(localizacao: str) -> dict:
    """Gerar resposta sobre clima"""
    resposta = f"""üå§Ô∏è **Condi√ß√µes Clim√°ticas em {localizacao}:**

**üåßÔ∏è Padr√£o de chuvas em Mo√ßambique:**
‚Ä¢ **√âpoca chuvosa:** Outubro/Novembro a Mar√ßo/Abril
‚Ä¢ **√âpoca seca:** Maio a Setembro
‚Ä¢ **Pico das chuvas:** Dezembro a Fevereiro

**üìä Planejamento agr√≠cola por √©poca:**

**Outubro-Dezembro:** 
‚Ä¢ Prepara√ß√£o e plantio das culturas principais
‚Ä¢ Aproveitamento das primeiras chuvas

**Janeiro-Mar√ßo:**
‚Ä¢ Manuten√ß√£o e cuidados das culturas
‚Ä¢ Aten√ß√£o para pragas e doen√ßas (umidade alta)

**Abril-Junho:**
‚Ä¢ Colheita das culturas de ciclo curto
‚Ä¢ Prepara√ß√£o para √©poca seca

**Julho-Setembro:**
‚Ä¢ Culturas de sequeiro
‚Ä¢ Irriga√ß√£o intensiva
‚Ä¢ Preparo para pr√≥xima safra

**üí° Use nossa previs√£o meteorol√≥gica:** Para decis√µes mais precisas sobre plantio e maneio!"""

    return {
        'resposta': resposta,
        'fonte': 'Meteorologia Agr√≠cola',
        'confidence': 0.85,
        'relacionadas': [
            'Previs√£o do tempo para agricultura',
            'Alertas clim√°ticos',
            'Calend√°rio agr√≠cola'
        ]
    }

def gerar_resposta_geral(pergunta: str, localizacao: str) -> dict:
    """Resposta geral quando n√£o consegue categorizar"""
    resposta = f"""ü§ñ **Assistente Agr√≠cola - {localizacao}**

Obrigado pela sua pergunta! Para dar a melhor recomenda√ß√£o, preciso entender melhor o que voc√™ quer saber.

**üåæ Posso ajudar com:**

**üå± Plantio e Cultivo:**
‚Ä¢ √âpocas ideais de plantio
‚Ä¢ Variedades recomendadas
‚Ä¢ Espa√ßamento e profundidade
‚Ä¢ Rota√ß√£o de culturas

**üêõ Controle de Pragas:**
‚Ä¢ Identifica√ß√£o de pragas e doen√ßas
‚Ä¢ Tratamentos naturais e qu√≠micos
‚Ä¢ Preven√ß√£o integrada

**üíß Irriga√ß√£o:**
‚Ä¢ Necessidades h√≠dricas
‚Ä¢ Sistemas de irriga√ß√£o
‚Ä¢ Economia de √°gua

**üåø Fertiliza√ß√£o:**
‚Ä¢ Aduba√ß√£o org√¢nica e qu√≠mica
‚Ä¢ Cronograma de aplica√ß√£o
‚Ä¢ Defici√™ncias nutricionais

**üìà Mercado:**
‚Ä¢ Pre√ßos e tend√™ncias
‚Ä¢ Estrat√©gias de venda
‚Ä¢ Rentabilidade

**üå§Ô∏è Clima:**
‚Ä¢ Previs√µes meteorol√≥gicas
‚Ä¢ Alertas clim√°ticos
‚Ä¢ Planejamento sazonal

**Como posso ajudar especificamente?** Reformule sua pergunta mencionando a cultura e o aspecto que te interessa!"""

    return {
        'resposta': resposta,
        'fonte': 'Assistente Geral AgroAlerta',
        'confidence': 0.60,
        'relacionadas': [
            'Como plantar milho?',
            'Pragas em feij√£o',
            'Pre√ßos de mandioca'
        ]
    }
    """
    Gerar resposta baseada em contexto local de Mo√ßambique
    """
    pergunta_lower = pergunta.lower()
    
    # Respostas sobre milho
    if any(palavra in pergunta_lower for palavra in ['milho', 'maiz']):
        if 'plantar' in pergunta_lower or 'plantio' in pergunta_lower:
            return """üåΩ **Plantio de Milho em Mo√ßambique:**

**Melhor √©poca:** Outubro a Dezembro (in√≠cio das chuvas)
**Variedades recomendadas:** ZM521, ZM623, Matuba
**Espa√ßamento:** 75cm entre fileiras, 25cm entre plantas
**Profundidade:** 3-5cm
**Sementes por cova:** 2-3 sementes

**Dicas espec√≠ficas para sua regi√£o:**
‚Ä¢ Prepare o solo antes das primeiras chuvas
‚Ä¢ Use variedades resistentes √† seca se em zona semi-√°rida
‚Ä¢ Fa√ßa rota√ß√£o com leguminosas para melhorar o solo

Precisa de mais detalhes sobre algum aspecto espec√≠fico?"""
        
        elif 'praga' in pergunta_lower or 'lagarta' in pergunta_lower:
            return """üêõ **Controle de Pragas no Milho:**

**Principais pragas em Mo√ßambique:**
‚Ä¢ Lagarta do cartucho (Spodoptera frugiperda)
‚Ä¢ Broca do colmo
‚Ä¢ Pulg√µes

**Controle biol√≥gico:**
‚Ä¢ Bacillus thuringiensis para lagartas
‚Ä¢ Plantio de plantas repelentes (tagetes, manjeric√£o)
‚Ä¢ Conserva√ß√£o de inimigos naturais

**Monitoramento:**
‚Ä¢ Inspe√ß√£o semanal das plantas
‚Ä¢ A√ß√£o r√°pida nos primeiros sinais
‚Ä¢ Use o detector de pragas do AgroAlerta!

**Controle qu√≠mico (se necess√°rio):**
‚Ä¢ Siga sempre as recomenda√ß√µes do r√≥tulo
‚Ä¢ Use equipamentos de prote√ß√£o
‚Ä¢ Respeite per√≠odos de car√™ncia"""
    
    # Respostas sobre irriga√ß√£o
    elif any(palavra in pergunta_lower for palavra in ['√°gua', 'irriga√ß√£o', 'rega']):
        return """üíß **Irriga√ß√£o Eficiente:**

**Necessidades h√≠dricas:**
‚Ä¢ Milho: 500-800mm por ciclo
‚Ä¢ Feij√£o: 300-500mm por ciclo  
‚Ä¢ Mandioca: 1000-1500mm por ano
‚Ä¢ Hortali√ßas: 400-600mm por ciclo

**Melhores pr√°ticas:**
‚Ä¢ Irrigar de manh√£ cedo (6-8h) ou final da tarde
‚Ä¢ Evitar molhar as folhas (previne doen√ßas)
‚Ä¢ Usar mulching para conservar umidade
‚Ä¢ Verificar umidade do solo com os dedos

**Sinais de estresse h√≠drico:**
‚Ä¢ Folhas murchas ao meio-dia
‚Ä¢ Crescimento lento
‚Ä¢ Amarelecimento precoce

**Economia de √°gua:**
‚Ä¢ Gotejamento para culturas de alto valor
‚Ä¢ Microaspers√£o para pomares
‚Ä¢ Capta√ß√£o de √°gua de chuva"""
    
    # Respostas sobre fertiliza√ß√£o
    elif any(palavra in pergunta_lower for palavra in ['fertilizante', 'adubo', 'nutri√ß√£o']):
        return """üå± **Fertiliza√ß√£o Balanceada:**

**NPK recomendado por hectare:**
‚Ä¢ **Milho:** 120-80-60 kg/ha
‚Ä¢ **Feij√£o:** 40-60-40 kg/ha
‚Ä¢ **Mandioca:** 60-40-80 kg/ha
‚Ä¢ **Hortali√ßas:** 150-100-120 kg/ha

**Aduba√ß√£o org√¢nica:**
‚Ä¢ Esterco bovino: 10-20 t/ha
‚Ä¢ Compostagem de restos vegetais
‚Ä¢ Aduba√ß√£o verde com mucuna, feij√£o-de-porco

**√âpocas de aplica√ß√£o:**
‚Ä¢ **Base:** no plantio (50% N, 100% P, 50% K)
‚Ä¢ **Cobertura:** 30-45 dias ap√≥s plantio (50% N, 50% K)

**Sinais de defici√™ncia:**
‚Ä¢ Amarelecimento: falta de nitrog√™nio
‚Ä¢ Folhas roxas: falta de f√≥sforo
‚Ä¢ Bordas queimadas: falta de pot√°ssio

Recomendo an√°lise de solo para precis√£o!"""
    
    # Respostas sobre mercado
    elif any(palavra in pergunta_lower for palavra in ['pre√ßo', 'venda', 'mercado']):
        return """üí∞ **Estrat√©gias de Mercado:**

**Melhores √©pocas para venda:**
‚Ä¢ **Milho:** Mar√ßo-Maio (p√≥s-colheita)
‚Ä¢ **Feij√£o:** Junho-Agosto
‚Ä¢ **Hortali√ßas:** Durante escassez no mercado

**Como obter melhores pre√ßos:**
‚Ä¢ Armazenamento adequado (secagem, controle de pragas)
‚Ä¢ Venda direta ao consumidor
‚Ä¢ Forma√ß√£o de grupos de produtores
‚Ä¢ Agrega√ß√£o de valor (processamento)

**Mercados em Mo√ßambique:**
‚Ä¢ Mercados locais: menores quantidades, pre√ßos vari√°veis
‚Ä¢ Compradores institucionais: quantidades maiores, pre√ßos est√°veis
‚Ä¢ Exporta√ß√£o: padr√µes de qualidade espec√≠ficos

Consulte a se√ß√£o Mercado do app para pre√ßos atualizados!"""
    
    # Resposta sobre clima
    elif any(palavra in pergunta_lower for palavra in ['clima', 'chuva', 'seca', 'tempo']):
        return """üå§Ô∏è **Gest√£o Clim√°tica:**

**Prepara√ß√£o para √©poca chuvosa:**
‚Ä¢ Plantio no in√≠cio das chuvas (Outubro-Dezembro)
‚Ä¢ Drenagem adequada para evitar encharcamento
‚Ä¢ Variedades de ciclo adequado

**Estrat√©gias para seca:**
‚Ä¢ Variedades tolerantes √† seca
‚Ä¢ Mulching para conservar umidade
‚Ä¢ Sistemas de capta√ß√£o de √°gua
‚Ä¢ Irriga√ß√£o de salva√ß√£o

**Uso da informa√ß√£o clim√°tica:**
‚Ä¢ Consulte previs√µes no app AgroAlerta
‚Ä¢ Planeje atividades com base no clima
‚Ä¢ Ajuste calend√°rio agr√≠cola conforme precipita√ß√£o

**Mudan√ßas clim√°ticas:**
‚Ä¢ Diversifica√ß√£o de culturas
‚Ä¢ Pr√°ticas de conserva√ß√£o do solo
‚Ä¢ Agrofloresta para resili√™ncia"""
    
    # Resposta gen√©rica
    else:
        return f"""ü§î Interessante pergunta sobre agricultura! 

Com base na experi√™ncia em Mo√ßambique, recomendo:

**Pr√°ticas gerais:**
‚Ä¢ Sempre adaptar t√©cnicas ao clima local
‚Ä¢ Usar variedades adaptadas √† regi√£o
‚Ä¢ Considerar pr√°ticas sustent√°veis
‚Ä¢ Buscar assist√™ncia t√©cnica quando necess√°rio

**Recursos do AgroAlerta:**
‚Ä¢ üì± Use o detector de pragas para problemas visuais
‚Ä¢ üå§Ô∏è Consulte dados clim√°ticos para planejamento
‚Ä¢ üí∞ Verifique pre√ßos de mercado antes de vender
‚Ä¢ üåæ Explore recomenda√ß√µes por cultura

**Para informa√ß√µes espec√≠ficas:**
Pode reformular sua pergunta mencionando:
‚Ä¢ Que cultura voc√™ cultiva?
‚Ä¢ Qual regi√£o de Mo√ßambique?
‚Ä¢ Qual problema espec√≠fico enfrenta?

Estou aqui para ajudar! üåæ"""

@api_view(['POST'])
@permission_classes([AllowAny])
@csrf_exempt
def gerar_resposta_contextual_avancada_view(request):
    """
    Endpoint para gerar respostas contextuais avan√ßadas do chatbot
    """
    try:
        data = request.data
        pergunta = data.get('pergunta', '')
        contexto = data.get('contexto', {})
        
        if not pergunta:
            return Response({
                'erro': 'Pergunta √© obrigat√≥ria'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Combina pergunta e contexto
        context_data = {
            'pergunta': pergunta,
            **contexto
        }
        
        # Gera resposta contextual avan√ßada
        resposta = gerar_resposta_contextual_avancada(context_data)
        
        return Response(resposta, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Erro ao gerar resposta contextual: {e}")
        return Response({
            'erro': 'Erro interno do servidor',
            'detalhes': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
@permission_classes([AllowAny])
def recomendacoes_gerais_view(request):
    """
    View para recomenda√ß√µes gerais por cultura e regi√£o
    """
    try:
        cultura = request.GET.get('cultura', '')
        regiao = request.GET.get('regiao', 'Maputo')
        
        recomendacoes = {
            'cultura': cultura,
            'regiao': regiao,
            'recomendacoes': [
                {
                    'categoria': 'Plantio',
                    'dica': f'Para {cultura} em {regiao}, plante no in√≠cio da √©poca chuvosa',
                    'prioridade': 'alta'
                },
                {
                    'categoria': 'Irriga√ß√£o',
                    'dica': 'Mantenha o solo com umidade adequada, sem encharcamento',
                    'prioridade': 'm√©dia'
                },
                {
                    'categoria': 'Fertiliza√ß√£o',
                    'dica': 'Fa√ßa an√°lise de solo e aplique fertilizantes conforme necessidade',
                    'prioridade': 'alta'
                }
            ],
            'timestamp': '2025-08-21T15:30:00'
        }
        
        return Response(recomendacoes)
        
    except Exception as e:
        logger.error(f"Erro nas recomenda√ß√µes: {e}")
        return Response(
            {'erro': 'Erro interno do servidor'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
