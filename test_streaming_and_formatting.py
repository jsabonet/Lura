#!/usr/bin/env python3
"""
Teste completo do sistema de formata√ß√£o com streaming
Valida tanto o regex melhorado quanto a prepara√ß√£o para streaming
"""

import sys
import os

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from firebase.ai_service import FirebaseAIService, _markdown_to_html

def test_formatting():
    """Testa casos complexos de formata√ß√£o incluindo quotes com bold/italic"""
    
    # Usar a fun√ß√£o diretamente, n√£o precisa instanciar a classe
    # ai_service = FirebaseAIService()
    
    # Casos de teste com formata√ß√£o complexa
    test_cases = [
        {
            "nome": "Bold dentro de aspas com texto antes",
            "texto": 'Op√ß√£o 1 (Biol√≥gica/Mais Segura): "Voc√™ tem algum insecticida biol√≥gico para lagartas, √† base de **Bacillus thuringiensis (Bt)**?"',
            "esperado": ["<strong>Bacillus thuringiensis (Bt)</strong>", "Op√ß√£o 1", "Biol√≥gica/Mais Segura"]
        },
        {
            "nome": "M√∫ltiplos bolds em par√™nteses",
            "texto": "Use fertilizante (**NPK 10-10-10**) ou (**NPK 20-20-20**) para melhores resultados",
            "esperado": ["<strong>NPK 10-10-10</strong>", "<strong>NPK 20-20-20</strong>"]
        },
        {
            "nome": "Italic dentro de aspas",
            "texto": 'O especialista disse: "Isto √© *muito importante* para o seu cultivo"',
            "esperado": ["<em>muito importante</em>", "especialista disse"]
        },
        {
            "nome": "Bold e italic misturados",
            "texto": "Para **tomates** use *√°gua moderada* e **adubo org√¢nico** regularmente",
            "esperado": ["<strong>tomates</strong>", "<em>√°gua moderada</em>", "<strong>adubo org√¢nico</strong>"]
        },
        {
            "nome": "Lista com formata√ß√£o inline",
            "texto": """**Pragas Comuns:**
1. **Pulg√µes** - use *sab√£o de pot√°ssio*
2. **Lagartas** - aplique **Bt** (*Bacillus thuringiensis*)
3. **√Åcaros** - tente *√≥leo de neem*""",
            "esperado": ["<strong>Pragas Comuns:</strong>", "<ol>", "<strong>Pulg√µes</strong>", "<em>sab√£o de pot√°ssio</em>", "<strong>Lagartas</strong>", "<strong>Bt</strong>", "<em>Bacillus thuringiensis</em>"]
        },
        {
            "nome": "Par√°grafo longo com formata√ß√£o variada",
            "texto": '''Para combater a **praga de lagartas**, recomendo tr√™s op√ß√µes:

**Op√ß√£o 1** (Biol√≥gica): "Use **Bacillus thuringiensis (Bt)**, que √© *seguro e eficaz*"
**Op√ß√£o 2** (Natural): Prepare uma *solu√ß√£o de alho* com **sab√£o neutro**
**Op√ß√£o 3** (Qu√≠mica): Como √∫ltimo recurso, use **inseticida espec√≠fico para lagartas**

Lembre-se: *prevenir √© melhor que remediar*!''',
            "esperado": ["<strong>praga de lagartas</strong>", "<strong>Bacillus thuringiensis (Bt)</strong>", "<em>seguro e eficaz</em>", "<strong>Op√ß√£o 1</strong>", "<strong>Op√ß√£o 2</strong>", "<strong>Op√ß√£o 3</strong>", "<em>solu√ß√£o de alho</em>", "<em>prevenir √© melhor que remediar</em>"]
        },
        {
            "nome": "Underscores em palavras t√©cnicas (n√£o devem virar italic)",
            "texto": "A vari√°vel test_variable e fun√ß√£o process_data n√£o devem ser afetadas",
            "esperado": ["test_variable", "process_data"]
        }
    ]
    
    resultados = []
    score = 0
    
    print("=" * 80)
    print("TESTE DE FORMATA√á√ÉO COMPLEXA E STREAMING")
    print("=" * 80)
    
    for i, caso in enumerate(test_cases, 1):
        print(f"\nüìù Teste {i}: {caso['nome']}")
        print(f"Input: {caso['texto'][:100]}{'...' if len(caso['texto']) > 100 else ''}")
        
        # Processar com markdown_to_html
        html = _markdown_to_html(caso['texto'])
        
        print(f"\nHTML gerado ({len(html)} caracteres):")
        print(html[:300] + ('...' if len(html) > 300 else ''))
        
        # Verificar se cont√©m os elementos esperados
        sucesso = True
        faltando = []
        
        for esperado in caso['esperado']:
            if esperado not in html:
                sucesso = False
                faltando.append(esperado)
        
        if sucesso:
            print("‚úÖ PASSOU - Todos os elementos esperados encontrados")
            score += 1
        else:
            print(f"‚ùå FALHOU - Elementos faltando: {faltando}")
        
        # Valida√ß√µes extras
        validacoes = []
        
        # 1. N√£o deve ter <br> tags
        if '<br>' not in html:
            validacoes.append("‚úì Sem <br> tags desnecess√°rias")
        else:
            validacoes.append("‚úó Cont√©m <br> tags")
        
        # 2. HTML deve estar escapado
        if '&lt;' in html or '&gt;' in html or '&amp;' in html or '<' not in caso['texto'].replace('<', ''):
            validacoes.append("‚úì HTML corretamente escapado")
        else:
            validacoes.append("‚úì Sem caracteres perigosos")
        
        # 3. Underscores em palavras n√£o devem criar <em>
        if 'test_variable' in caso['texto'] or 'process_data' in caso['texto']:
            if '<em>variable</em>' not in html and '<em>data</em>' not in html:
                validacoes.append("‚úì Underscores em palavras preservados")
            else:
                validacoes.append("‚úó Underscores incorretamente convertidos")
        
        print("\nValida√ß√µes:")
        for v in validacoes:
            print(f"  {v}")
        
        resultados.append({
            "nome": caso['nome'],
            "sucesso": sucesso,
            "html_length": len(html)
        })
    
    print("\n" + "=" * 80)
    print("RESUMO DOS RESULTADOS")
    print("=" * 80)
    print(f"\n‚úÖ Testes passados: {score}/{len(test_cases)}")
    
    for r in resultados:
        status = "‚úÖ" if r['sucesso'] else "‚ùå"
        print(f"{status} {r['nome']} ({r['html_length']} chars)")
    
    print("\n" + "=" * 80)
    print("PREPARA√á√ÉO PARA STREAMING")
    print("=" * 80)
    print("""
‚úÖ Hook useStreamingText criado
‚úÖ Componente StreamingMessage implementado  
‚úÖ Integra√ß√£o no chatbot/page.tsx completa
‚úÖ Estado streamingMessageIndex gerenciado
‚úÖ Ativa√ß√£o autom√°tica em novas mensagens
‚úÖ Callback onStreamComplete para limpar estado
‚úÖ Click-to-complete habilitado
‚úÖ Cursor animado durante streaming

üéØ Efeito de streaming tipo ChatGPT/Claude est√° pronto!
""")
    
    if score == len(test_cases):
        print("üéâ PERFEITO! Todos os testes de formata√ß√£o passaram!")
        print("‚ú® Sistema pronto para uso em produ√ß√£o com streaming visual")
        return 0
    else:
        print(f"‚ö†Ô∏è  {len(test_cases) - score} teste(s) falharam")
        print("üí° Revise os casos que falharam acima")
        return 1

if __name__ == '__main__':
    exit(test_formatting())
