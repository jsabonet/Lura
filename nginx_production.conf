# Configura√ß√£o DigitalOcean para AgroAlerta + IA

## üéØ **Estrat√©gia: Arquitetura Escal√°vel para IA**

### **Droplet Recomendado (Inicial)**
```bash
# Configura√ß√£o Inicial - Desenvolvimento/MVP
- CPU: 2 vCPUs (Intel Regular)
- RAM: 4GB 
- SSD: 80GB
- Pre√ßo: ~$24/m√™s
- Regi√£o: escolher mais pr√≥xima (Brasil: n√£o dispon√≠vel, usar NYC3 ou SFO3)

# Upgrade Futuro - Com Modelos IA
- CPU: 4-8 vCPUs (CPU-Optimized)
- RAM: 16-32GB 
- SSD: 200GB+
- GPU: Considerar GPU Droplets quando dispon√≠vel
- Pre√ßo: $96-192/m√™s
```

### **Prepara√ß√£o para IA - Volumes Adicionais**
```bash
# Volume separado para modelos IA
- Volume: 100GB Block Storage ($10/m√™s)
- Mount: /var/models
- Backup autom√°tico
- F√°cil upgrade sem afetar app
```

## üèóÔ∏è **Arquitetura Escal√°vel**

### **Fase 1: MVP (Agora)**
```
Internet ‚Üí Load Balancer ‚Üí Droplet (Docker)
                          ‚îú‚îÄ‚îÄ Frontend (Next.js)
                          ‚îú‚îÄ‚îÄ Backend (Django)
                          ‚îú‚îÄ‚îÄ PostgreSQL
                          ‚îî‚îÄ‚îÄ Redis (cache)
```

### **Fase 2: Com IA (Futuro)**
```
Internet ‚Üí Load Balancer ‚Üí App Droplet (Docker)
                          ‚îú‚îÄ‚îÄ Frontend (Next.js)
                          ‚îú‚îÄ‚îÄ Backend (Django)
                          ‚îî‚îÄ‚îÄ PostgreSQL
                          
                          ‚Üì API calls
                          
                        AI Droplet (Docker)
                          ‚îú‚îÄ‚îÄ ML Models
                          ‚îú‚îÄ‚îÄ TensorFlow/PyTorch
                          ‚îú‚îÄ‚îÄ Model Cache
                          ‚îî‚îÄ‚îÄ GPU Processing
```

## üöÄ **Setup Inicial Otimizado**

### **1. Criar Droplet**
```bash
# Via interface DigitalOcean
Region: New York 3 (NYC3) ou San Francisco 3 (SFO3)
Image: Ubuntu 22.04 (LTS) x64
Size: Regular Intel - 2 GB / 2 vCPUs / 80 GB SSD
Monitoring: Ativado
Backups: Ativado (20% extra, ~$5/m√™s)
IPv6: Ativado
User data: (script de setup abaixo)
```

### **2. Script de Setup Automatizado**
```bash
#!/bin/bash
# user_data_script.sh - Execute na cria√ß√£o do droplet

# Atualizar sistema
apt update && apt upgrade -y

# Instalar Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
systemctl enable docker
systemctl start docker

# Instalar Docker Compose
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Instalar ferramentas essenciais
apt install -y git htop nginx certbot python3-certbot-nginx fail2ban ufw

# Configurar firewall
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80
ufw allow 443
ufw --force enable

# Configurar fail2ban (prote√ß√£o SSH)
systemctl enable fail2ban
systemctl start fail2ban

# Criar diret√≥rio do projeto
mkdir -p /var/www/agroalerta
cd /var/www/agroalerta

# Configurar Git (para deploy)
git config --global user.name "Deploy Bot"
git config --global user.email "deploy@agroalerta.com"

# Criar usu√°rio para deploy
useradd -m -s /bin/bash deploy
usermod -aG docker deploy
mkdir -p /home/deploy/.ssh
chown deploy:deploy /home/deploy/.ssh
chmod 700 /home/deploy/.ssh

echo "Setup inicial completo! Agora configurar projeto..."
```

## üê≥ **Docker Compose Otimizado para IA**

### **docker-compose.yml Atualizado**
```yaml
version: '3.8'

services:
  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.seudominio.com
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/agroalerta
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - models_volume:/app/models  # Para modelos IA futuros
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=agroalerta
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # Para backups autom√°ticos
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Cache + Queue para IA)
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (Para processamento IA futuro)
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A agroalerta worker -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/agroalerta
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - models_volume:/app/models
    deploy:
      resources:
        reservations:
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Monitoring (Opcional)
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  models_volume:  # Para modelos IA
  portainer_data:

networks:
  default:
    driver: bridge
```

## üîß **Configura√ß√µes de Produ√ß√£o**

### **.env de Produ√ß√£o**
```bash
# .env
POSTGRES_PASSWORD=senha-super-segura-postgresql
SECRET_KEY=django-secret-key-super-segura
OPENWEATHER_API_KEY=sua-chave-openweather
GOOGLE_MAPS_API_KEY=sua-chave-google-maps

# Para IA futuros
HUGGINGFACE_TOKEN=seu-token-huggingface
OPENAI_API_KEY=sua-chave-openai
MODEL_CACHE_SIZE=2GB
GPU_ENABLED=false  # true quando tiver GPU
```

### **Nginx Otimizado**
```nginx
events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    # Otimiza√ß√µes
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;  # Para uploads de imagens

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # Rate limiting (prote√ß√£o DDoS)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    upstream frontend {
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream backend {
        server backend:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    server {
        listen 80;
        server_name seudominio.com www.seudominio.com;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name seudominio.com www.seudominio.com;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/seudominio.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/seudominio.com/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Frontend (Next.js)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
        }

        # Backend API
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;  # Para processamento IA longo
        }

        # Login endpoint (rate limited)
        location /api/auth/login/ {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Admin Django
        location /admin/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Arquivos est√°ticos (com cache)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location /media/ {
            alias /var/www/media/;
            expires 30d;
            add_header Cache-Control "public";
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
